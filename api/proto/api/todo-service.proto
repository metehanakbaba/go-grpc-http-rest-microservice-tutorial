syntax = "proto3";
package api;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

// Ornek proto:  https://github.com/grpc-ecosystem/grpc-gateway/blob/master/examples/proto/examplepb/a_bit_of_everything.proto
option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
        title: "ToDo REST API";
        version: "1.0";
        contact: {
            name: "go-grpc-http-rest-microservice";
            url: "https://github.com/metehanakbaba/go-grpc-http-rest-microservice-tutorial";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
    key: "404";
    value: {
        description: "Endpoint bulunamadı.";
        schema: {
           json_schema: {
                    type: STRING;
                }
            }
        }
    },
};

// ToDo Task
message ToDo {
    // Benzersiz integer ID (A_I)
    int64 id = 1;
    // Task Basligi ToDo Task icin
    string title = 2;
    // Detayli Aciklama ToDo Task icin
    string description = 3;
    // Olusturlacak ToDo Task icin hatirlatma (Tarih/Saat) timestamp formatında
    google.protobuf.Timestamp reminder = 4;
}

//  ToDo Sorgu
message CreateRequest{
    // ToDo Task
    ToDo toDo = 1;
}

// ToDO Yanıt
message CreateResponse{
    // Oluşturulacak task için ID
    int64 id = 1;
}

message ReadRequest{
    // Olusturulacak sorgu okuma icin ID
    int64 id = 1;
}

message ReadResponse{
    // Olusturulacak Task
    ToDo toDo = 1;
}

message UpdateRequest{
    // Olusturulacak Task
    ToDo toDo = 1;
}

message UpdateResponse{
    // Güncellenen ToDO sayılarını içerir
    // Başarılı silme durumunda 1 sonucuna eşittir
    int64 updated = 1;
}

message DeleteRequest{
    int64 id = 1;
}


message DeleteResponse{
    // Silinen ToDoların sayısını içerir
    // Başarılı silme durumunda 1 sonucuna eşittir
    int64 deleted = 1;
}

message ReadAllRequest{
}

message ReadAllResponse{
    repeated ToDo toDos = 1;
}

// ToDo Tasklerin servisi
service ToDoService {
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse){
        option (google.api.http) = {
            get: "/api/todo/all"
        };
    }

    rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post: "/api/todo"
            body: "*"
        };
    }

    rpc Read(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/api/todo/{id}"
        };
    }

    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/api/todo/{toDo.id}"
            body: "*"

            additional_bindings {
                patch: "/api/todo/{toDo.id}"
                body: "*"
            }
        };
    }

    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/api/todo/{id}"
        };
    }
}
